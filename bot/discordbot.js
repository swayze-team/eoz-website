import { Client, GatewayIntentBits, EmbedBuilder, ChannelType } from 'discord.js'
import fetch from 'node-fetch'
import dotenv from 'dotenv'

dotenv.config()

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildPresences
  ]
})

const API_URL = process.env.API_URL || 'http://localhost:3000'
const API_SECRET = process.env.API_SECRET
const SUPPORT_CHANNEL_ID = process.env.DISCORD_SUPPORT_CHANNEL_ID
const GUILD_ID = process.env.DISCORD_SERVER_ID

// Map pour stocker les tickets actifs
const activeTickets = new Map()

client.once('ready', async () => {
  console.log(`‚úÖ Bot connect√© en tant que ${client.user.tag}`)
  
  // Envoyer les donn√©es initiales du serveur
  await sendServerData()
  
  // Mettre √† jour les donn√©es toutes les 5 minutes
  setInterval(async () => {
    await sendServerData()
  }, 5 * 60 * 1000)
})

// Fonction pour envoyer les donn√©es du serveur √† l'API
async function sendServerData() {
  try {
    const guild = client.guilds.cache.get(GUILD_ID)
    if (!guild) return

    await guild.members.fetch()
    
    const members = guild.members.cache
    const onlineMembers = members.filter(member => 
      member.presence?.status === 'online' || 
      member.presence?.status === 'idle' ||
      member.presence?.status === 'dnd'
    )

    const memberData = onlineMembers.map(member => ({
      id: member.id,
      username: member.user.username,
      displayName: member.displayName,
      avatar: member.user.displayAvatarURL({ size: 64 }),
      status: member.presence?.status || 'offline',
      joinedAt: member.joinedAt
    })).slice(0, 10) // Limiter √† 10 membres pour l'affichage

    const serverData = {
      type: 'server_update',
      data: {
        memberCount: members.size,
        onlineCount: onlineMembers.size,
        members: memberData,
        timestamp: new Date().toISOString()
      }
    }

    await sendToAPI(serverData)
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi des donn√©es du serveur:', error)
  }
}

// Fonction pour envoyer des donn√©es √† l'API du site
async function sendToAPI(data) {
  try {
    const response = await fetch(`${API_URL}/api/bot/init/v3`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_SECRET}`
      },
      body: JSON.stringify(data)
    })

    if (!response.ok) {
      throw new Error(`Erreur API: ${response.status}`)
    }

    console.log('‚úÖ Donn√©es envoy√©es √† l\'API avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi √† l\'API:', error)
  }
}

// G√©rer les nouveaux tickets de support
client.on('messageCreate', async (message) => {
  // Ignorer les messages du bot
  if (message.author.bot) return

  // V√©rifier si c'est dans le canal de support
  if (message.channel.id === SUPPORT_CHANNEL_ID) {
    // V√©rifier si c'est une r√©ponse √† un ticket
    const ticketMatch = message.content.match(/^!reply\s+([A-Z0-9-]+)\s+(.+)$/i)
    
    if (ticketMatch) {
      const [, ticketId, response] = ticketMatch
      
      // Envoyer la r√©ponse √† l'API
      const responseData = {
        type: 'support_response',
        data: {
          ticketId,
          response,
          staffMember: {
            id: message.author.id,
            username: message.author.username,
            avatar: message.author.displayAvatarURL({ size: 64 })
          },
          timestamp: new Date().toISOString()
        }
      }

      await sendToAPI(responseData)

      // Confirmer l'envoi
      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle('‚úÖ R√©ponse envoy√©e')
        .setDescription(`R√©ponse envoy√©e pour le ticket: **${ticketId}**`)
        .addFields({ name: 'R√©ponse', value: response })
        .setTimestamp()

      await message.reply({ embeds: [embed] })
    }
  }
})

// G√©rer les tickets re√ßus de l'API (via webhook ou autre m√©thode)
export async function handleSupportTicket(ticketData) {
  try {
    const supportChannel = client.channels.cache.get(SUPPORT_CHANNEL_ID)
    if (!supportChannel) {
      throw new Error('Canal de support non trouv√©')
    }

    const embed = new EmbedBuilder()
      .setColor('#ff9500')
      .setTitle('üé´ Nouveau Ticket de Support')
      .setDescription('Un nouveau ticket de support a √©t√© cr√©√©')
      .addFields(
        { name: 'üÜî ID du Ticket', value: ticketData.ticketId, inline: true },
        { name: 'üë§ Nom', value: ticketData.name, inline: true },
        { name: 'üìß Email', value: ticketData.email, inline: true },
        { name: 'üìã Sujet', value: ticketData.subject, inline: false },
        { name: '‚ö†Ô∏è Priorit√©', value: ticketData.priority.toUpperCase(), inline: true },
        { name: 'üí¨ Message', value: ticketData.message.length > 1000 
          ? ticketData.message.substring(0, 1000) + '...' 
          : ticketData.message, inline: false }
      )
      .setFooter({ text: `Pour r√©pondre: !reply ${ticketData.ticketId} [votre r√©ponse]` })
      .setTimestamp()

    await supportChannel.send({ embeds: [embed] })

    // Stocker le ticket actif
    activeTickets.set(ticketData.ticketId, {
      ...ticketData,
      status: 'open',
      createdAt: new Date().toISOString()
    })

    console.log(`‚úÖ Ticket ${ticketData.ticketId} cr√©√© avec succ√®s`)
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du ticket:', error)
    throw error
  }
}

// Commandes slash (optionnel)
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return

  if (interaction.commandName === 'stats') {
    const guild = interaction.guild
    await guild.members.fetch()
    
    const members = guild.members.cache
    const onlineMembers = members.filter(member => 
      member.presence?.status === 'online' || 
      member.presence?.status === 'idle' ||
      member.presence?.status === 'dnd'
    )

    const embed = new EmbedBuilder()
      .setColor('#5865F2')
      .setTitle('üìä Statistiques du Serveur EOZ')
      .addFields(
        { name: 'üë• Membres Total', value: members.size.toString(), inline: true },
        { name: 'üü¢ En Ligne', value: onlineMembers.size.toString(), inline: true },
        { name: 'üé´ Tickets Actifs', value: activeTickets.size.toString(), inline: true }
      )
      .setTimestamp()

    await interaction.reply({ embeds: [embed] })
  }
})

// Gestion des erreurs
client.on('error', (error) => {
  console.error('‚ùå Erreur Discord:', error)
})

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error)
})

// Connexion du bot
client.login(process.env.DISCORD_BOT_TOKEN)

export { client, handleSupportTicket }

